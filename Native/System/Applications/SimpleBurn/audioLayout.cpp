os::String cAudioTab1 = os::String( "Audio" );
for( uint8 i = 0 ; i < 50 - strlen(cAudioTab1.c_str()) ; i++ )
	cAudioTab1 = cAudioTab1 + os::String(" ");
os::String cAudioTab2 = os::String( "Burn" );
for( uint8 i = 0 ; i < 50 - strlen(cAudioTab2.c_str()) ; i++ )
	cAudioTab2 = cAudioTab2 + os::String(" ");

m_pcAudio = new os::VLayoutNode( "Audio", 1.000000 );
m_pcAudio->SetBorders( os::Rect( 5.000000, 5.000000, 5.000000, 5.000000 ) );
m_pcAudioTabView = new os::TabView( os::Rect(), "AudioTabView" );
m_pcAudioAuthorTab = new os::LayoutView( os::Rect(), "AudioAuthorTab" );
m_pcAudioAuthorLayout = new os::VLayoutNode( "AudioAuthorLayout" );
m_pcAudioTabView->AppendTab( cAudioTab1, m_pcAudioAuthorTab );
m_pcAudioBurnTab = new os::LayoutView( os::Rect(), "AudioBurnTab" );
m_pcAudioBurnLayout = new os::VLayoutNode( "AudioBurnLayout" );
m_pcAudioTabView->AppendTab( cAudioTab2, m_pcAudioBurnTab );
m_pcAudio->AddChild( m_pcAudioTabView, 1.000000 );
m_pcAudioAuthor = new os::VLayoutNode( "AudioAuthor", 1.000000 );
m_pcAudioAuthor->SetBorders( os::Rect( 5.000000, 5.000000, 5.000000, 5.000000 ) );
m_pcAudioAuthorLayout->AddChild( m_pcAudioAuthor );
m_pcAudioList = new os::ListView( os::Rect(), "AudioList", os::ListView::F_MULTI_SELECT | os::ListView::F_RENDER_BORDER );
m_pcAudioList->InsertColumn( "Time", 60 );
m_pcAudioList->InsertColumn( "Audio Files", 0 );
m_pcAudioAuthor->AddChild( m_pcAudioList, 1.000000 );
m_pcAudioNode = new os::HLayoutNode( "AudioNode", 0.000001 );
m_pcAudioNode->SetBorders( os::Rect( 0.000000, 10.000000, 0.000000, 0.000000 ) );
m_pcAudioAuthor->AddChild( m_pcAudioNode );
os::File cAudioAddFile( open_image_file( get_image_id() ) );
os::Resources cAudioAddResources( &cAudioAddFile );
os::ResStream* pcAudioAddStream = cAudioAddResources.GetResourceStream( "add-audio.png" );
m_pcAudioAdd = new os::ImageButton( os::Rect(), "AudioAdd", "", new os::Message( M_AUDIO_ADD ), new os::BitmapImage( pcAudioAddStream ), os::ImageButton::IB_TEXT_BOTTOM, true, true, true );
delete( pcAudioAddStream );
m_pcAudioNode->AddChild( m_pcAudioAdd, 0.000001 );
m_pcAudioSpacer1 = new os::HLayoutSpacer( "AudioSpacer1", 2.000000, 2.000000, NULL, 1.000000 );
m_pcAudioNode->AddChild( m_pcAudioSpacer1 );
os::File cAudioRemoveFile( open_image_file( get_image_id() ) );
os::Resources cAudioRemoveResources( &cAudioRemoveFile );
os::ResStream* pcAudioRemoveStream = cAudioRemoveResources.GetResourceStream( "remove.png" );
m_pcAudioRemove = new os::ImageButton( os::Rect(), "AudioRemove", "", new os::Message( M_AUDIO_REMOVE ), new os::BitmapImage( pcAudioRemoveStream ), os::ImageButton::IB_TEXT_BOTTOM, true, true, true );
delete( pcAudioRemoveStream );
m_pcAudioNode->AddChild( m_pcAudioRemove, 0.000001 );
m_pcAudioSeparatorLeft = new os::Separator( os::Rect(), "AudioSeparatorLeft", os::VERTICAL );
m_pcAudioNode->AddChild( m_pcAudioSeparatorLeft, 1.000000 );
m_pcAudioTime = new os::TextView( os::Rect(), "AudioTime", "00:00:00" );
m_pcAudioTime->SetReadOnly( true );
m_pcAudioNode->AddChild( m_pcAudioTime, 2.000000 );
m_pcAudioSpacer2 = new os::HLayoutSpacer( "AudioSpacer2", 10.000000, 10.000000, NULL, 1.000000 );
m_pcAudioNode->AddChild( m_pcAudioSpacer2 );
m_pcAudioTypeSelection = new os::DropdownMenu( os::Rect(), "AudioTypeSelection" );
m_pcAudioTypeSelection->SetSelectionMessage( new os::Message( M_AUDIO_TYPE ) );
m_pcAudioTypeSelection->AppendItem( "Select disk-type" );
m_pcAudioTypeSelection->SetSelection( (int) 0 );
m_pcAudioTypeSelection->SetReadOnly( true );
m_pcAudioNode->AddChild( m_pcAudioTypeSelection, 1.000000 );
m_pcAudioSeparatorRight = new os::Separator( os::Rect(), "AudioSeparatorRight", os::VERTICAL );
m_pcAudioNode->AddChild( m_pcAudioSeparatorRight, 1.000000 );
os::File cAudioUpFile( open_image_file( get_image_id() ) );
os::Resources cAudioUpResources( &cAudioUpFile );
os::ResStream* pcAudioUpStream = cAudioUpResources.GetResourceStream( "move-up.png" );
m_pcAudioUp = new os::ImageButton( os::Rect(), "AudioUp", "", new os::Message( M_AUDIO_UP ), new os::BitmapImage( pcAudioUpStream ), os::ImageButton::IB_TEXT_BOTTOM, true, true, true );
delete( pcAudioUpStream );
m_pcAudioNode->AddChild( m_pcAudioUp, 0.000001 );
m_pcAudioSpacer3 = new os::HLayoutSpacer( "AudioSpacer3", 2.000000, 2.000000, NULL, 1.000000 );
m_pcAudioNode->AddChild( m_pcAudioSpacer3 );
os::File cAudioDownFile( open_image_file( get_image_id() ) );
os::Resources cAudioDownResources( &cAudioDownFile );
os::ResStream* pcAudioDownStream = cAudioDownResources.GetResourceStream( "move-down.png" );
m_pcAudioDown = new os::ImageButton( os::Rect(), "AudioDown", "", new os::Message( M_AUDIO_DOWN ), new os::BitmapImage( pcAudioDownStream ), os::ImageButton::IB_TEXT_BOTTOM, true, true, true );
delete( pcAudioDownStream );
m_pcAudioNode->AddChild( m_pcAudioDown, 0.000001 );
m_pcAudioBurn = new os::VLayoutNode( "AudioBurn", 1.000000 );
m_pcAudioBurn->SetBorders( os::Rect( 5.000000, 5.000000, 5.000000, 5.000000 ) );
m_pcAudioBurnLayout->AddChild( m_pcAudioBurn );
m_pcAudioWriteDevice = new os::HLayoutNode( "AudioWriteDevice", 1.000000 );
m_pcAudioWriteDevice->SetBorders( os::Rect( 0.000000, 0.000000, 0.000000, 0.000000 ) );
m_pcAudioBurn->AddChild( m_pcAudioWriteDevice );
m_pcAudioWriteDeviceString = new os::StringView( os::Rect(), "AudioWriteDeviceString", "Device:" );
m_pcAudioWriteDevice->AddChild( m_pcAudioWriteDeviceString, 1.000000 );
m_pcAudioWriteDeviceSelection = new os::DropdownMenu( os::Rect(), "AudioWriteDeviceSelection" );
m_pcAudioWriteDeviceSelection->SetSelectionMessage( new os::Message( M_AUDIO_WRITEDEVICE ) );
m_pcAudioWriteDeviceSelection->SetReadOnly( true );
m_pcAudioWriteDeviceSelection->AppendItem( "Choose Device..." );
m_pcAudioWriteDeviceSelection->SetSelection( (int) 0 );
m_pcAudioWriteDevice->AddChild( m_pcAudioWriteDeviceSelection, 1.000000 );
m_pcAudioBurnSpacer1 = new os::VLayoutSpacer( "AudioBurnSpacer1", 0.000000, 100000.000000, NULL, 1.000000 );
m_pcAudioBurn->AddChild( m_pcAudioBurnSpacer1 );
m_pcAudioSpeed = new os::VLayoutNode( "AudioSpeed", 1.000000 );
m_pcAudioSpeed->SetBorders( os::Rect( 0.000000, 0.000000, 0.000000, 0.000000 ) );
m_pcAudioBurn->AddChild( m_pcAudioSpeed );
m_pcAudioSpeedSelection = new os::HLayoutNode( "AudioSpeedSelection", 1.000000 );
m_pcAudioSpeedSelection->SetBorders( os::Rect( 0.000000, 0.000000, 0.000000, 0.000000 ) );
m_pcAudioSpeed->AddChild( m_pcAudioSpeedSelection );
m_pcAudioSpeedString = new os::StringView( os::Rect(), "AudioSpeedString", "Write-speed:" );
m_pcAudioSpeedSelection->AddChild( m_pcAudioSpeedString, 1.000000 );
m_pcAudioSpeedSlider = new os::Slider( os::Rect(), "AudioSpeedSlider", new os::Message( M_AUDIO_SPEED ), os::Slider::TICKS_BELOW, 10, os::Slider::KNOB_SQUARE, os::HORIZONTAL );
m_pcAudioSpeedSlider->SetStepCount( 26 );
m_pcAudioSpeedSlider->SetTickCount( 11 );
m_pcAudioSpeedSlider->SetLimitLabels( "1x", "50x" );
m_pcAudioSpeedSlider->SetMinMax( 1.000000, 50.000000 );
m_pcAudioSpeedSelection->AddChild( m_pcAudioSpeedSlider, 1.000000 );
m_pcAudioSpeedCheckBox = new os::CheckBox( os::Rect(), "AudioSpeedCheckBox", "Max. write-speed.", new os::Message( M_AUDIO_MAXSPEED ) );
m_pcAudioSpeedCheckBox->SetValue( true );
m_pcAudioSpeed->AddChild( m_pcAudioSpeedCheckBox, 1.000000 );
m_pcAudioBurnSpacer2 = new os::VLayoutSpacer( "AudioBurnSpacer2", 0.000000, 100000.000000, NULL, 1.000000 );
m_pcAudioBurn->AddChild( m_pcAudioBurnSpacer2 );
m_pcAudioCopies = new os::HLayoutNode( "AudioCopies", 1.000000 );
m_pcAudioCopies->SetBorders( os::Rect( 0.000000, 0.000000, 0.000000, 0.000000 ) );
m_pcAudioBurn->AddChild( m_pcAudioCopies );
m_pcAudioCopiesString = new os::StringView( os::Rect(), "AudioCopiesString", "Number of copies to burn:" );
m_pcAudioCopies->AddChild( m_pcAudioCopiesString, 1.000000 );
m_pcAudioCopiesSpinner = new os::Spinner( os::Rect(), "AudioCopiesSpinner", 1.000000, new os::Message( M_AUDIO_COPIES ) );
m_pcAudioCopiesSpinner->SetMinMax( 1.000000, 25.000000 );
m_pcAudioCopiesSpinner->SetStep( 1.000000 );
m_pcAudioCopiesSpinner->SetFormat( "%.0f" );
m_pcAudioCopies->AddChild( m_pcAudioCopiesSpinner, 0.200000 );
m_pcAudioBurnSpacer3 = new os::VLayoutSpacer( "AudioBurnSpacer3", 0.000000, 100000.000000, NULL, 1.000000 );
m_pcAudioBurn->AddChild( m_pcAudioBurnSpacer3 );
m_pcAudioButton = new os::HLayoutNode( "AudioButton", 0.000001 );
m_pcAudioButton->SetBorders( os::Rect( 0.000000, 0.000000, 0.000000, 0.000000 ) );
m_pcAudioBurn->AddChild( m_pcAudioButton );
m_pcAudioBurnSpacer4 = new os::HLayoutSpacer( "AudioBurnSpacer4", 0.000000, 100000.000000, NULL, 1.000000 );
m_pcAudioButton->AddChild( m_pcAudioBurnSpacer4 );
os::File cAudioBurnButtonFile( open_image_file( get_image_id() ) );
os::Resources cAudioBurnButtonResources( &cAudioBurnButtonFile );
os::ResStream* pcAudioBurnButtonStream = cAudioBurnButtonResources.GetResourceStream( "burn.png" );
m_pcAudioBurnButton = new os::ImageButton( os::Rect(), "AudioBurnButton", "Burn", new os::Message( M_AUDIO_BURN ), new os::BitmapImage( pcAudioBurnButtonStream ), os::ImageButton::IB_TEXT_RIGHT, true, true, false );
delete( pcAudioBurnButtonStream );
m_pcAudioButton->AddChild( m_pcAudioBurnButton, 0.000001 );
m_pcAudioAuthorTab->SetRoot( m_pcAudioAuthorLayout );
m_pcAudioBurnTab->SetRoot( m_pcAudioBurnLayout );

