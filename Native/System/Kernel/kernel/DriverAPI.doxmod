/*!
 * \defgroup DriverAPI Syllable Device Driver API
 */


/*! \mainpage Documentation of the Syllable device driver API

Note: This documentation is very far from being complete.

\ref intro "Introduction"

\ref kernel_drivers "Writing kernel device drivers"

\ref busmanager_drivers "Writing busmanagers"

\ref filesystem_drivers "Writing file-system drivers"

\ref network_drivers "Writing network drivers"

\ref appserver_video_drivers "Writing appserver video drivers"

\ref DriverAPI "Kernel API documentation"

*/

/*! \page intro Introduction to the various driver types

If we speak about writing drivers, we have to divide between kernel 
drivers and appserver drivers. Kernel drivers are used for hardware
like soundcards, networkcards and also for file-system addons. Graphics
drivers and the highlevel part of input drivers are handled by the
appserver. While kernel drivers are written in C, appserver addons are
written in C++. Common to both is that they are simple ELF modules, which are
loaded if necessary. Unlike some UNIX systems, Syllable has a defined 
interface between the drivers and the kernel/appserver, which is not
changed very often.

Please note that you have to be careful when writing drivers because
a bug in a driver can cause the system to lock up and make it 
completely unusable. If you can, you should have a second Syllable
installation, which you can use to remove invalid drivers.

*/

/*! \page kernel_drivers

\section sec1 Basic description
Device drivers in Syllable are abstracted through the filesystem in much
the same way as in UNIX. All device drivers export their
functionality through special files inside the /dev/ directory or a
sub-directory of /dev/. Unlike in traditional UNIXes the /dev/
directory in Syllable is hierarchial and is very dynamic in that device
drivers can add and remove nodes at runtime if it for example controll
a removable device that might be added or removed after the driver is
initialized.

\section sec2 Driver initialization

A driver is just an ELF binary built in much the same way as a regular
DLL. When a driver is loaded by the kernel it will search for a
exported symbol named "device_init" and call it to allow the driver to
initialize itself. The device_init() function is passed a unique
device ID that is dynamically assigned to each driver when loaded and
used by the kernel to identify the driver later.

Just before the driver is unloaded the kernel will look for a global
function named "device_uninit()" and if found it will be called to
allow the driver to clean up.

There is also a "device_release()" function which is called for every
claimed device before device_uninit() is called for the driver.

This device_init() and device_uninit() are the only functions that will
be called directly by the kernel. For the driver to do any usefull
work it must export one or more device-nodes through the Syllable Device
FS. This is a logical file system that is mounted at "/dev/"
and controll all devices. Each device is present as a magic file
located in "/dev/" or a sub-directory of "/dev/". Initially "/dev/"
only contain "/dev/null" and "/dev/zero" which is controlled by the Syllable
VFS itself. All other directory and device-nodes are created by device
drivers. A device driver can create a device-node with
create_device_node() and remove it with delete_device_node().  When
creating a device node the driver must provide a function pointer
table with entry points to the drivers functionality. The functions in
the table will be called by the Syllable VFS to controll the device. The most
important functions are read(), write() and ioctl() but there are also
functions to open/close the device aswell as functions called by
select() to make it possible for one thread to wait for IO on multiple
devices.

A typical device driver will create one node in device_init() and
delete it again in device_uninit().

\code

int g_nMyDeviceNode = -1;

status_t device_init( int nDeviceID )
{
	struct MyDeviceNode sNode;
	g_nMyDeviceNode = create_device_node( nDeviceID, -1, "misc/mydevice", &g_sOperations, &sNode );
	
	if ( g_nMyDeviceNode < 0 ) {
		return( g_nMyDeviceNode ); /* Failed to create the device node */
	} else {
		return( EOK );
	}
}

status_t device_uninit( int nDeviceID )
{
	delete_device_node( g_nMyDeviceNode );
	return( EOK );
}

\endcode

\section sec3 How a driver is located

Since the nodes inside /dev/ are created by the device drivers themself
and not by the kernel it is not directly obvious what driver should be
loaded if an application tries to open for example
"/dev/video/cpia".

If this is the first time someone attempts to open the CPiA device the
driver is not loaded and "/dev/video/cpia" does not exists. If this is
the first time anything inside /dev/ is touched neighter does the
"/dev/video" directory.

To make it possible for the kernel to search for drivers in a
efficient way the driver-binaries are located in a directory tree
similar to the resulting tree inside /dev/. For example the CPiA
driver from the above example whould be located in
"/system/drivers/dev/video/cpia".

If the kernel is asked to open for example "/dev/video/cpia" it would
start by opening the "/dev" directory which would cause the
"/system/drivers/dev" directory to be iterated. During the iteration
all drivers found will be attempted to load and initiate and all
directories will be replicated inside /dev/. Since
"/system/drivers/dev" contains a directory named "video" this will
cause "/dev/video" to be created.  When "/dev/" is successfully opened
it will attempt to open "/dev/video" which should now exist. Opening
"/dev/video" will cause the "/system/drivers/dev/video" directory to
be iterated and the "cpia" binary to be loaded. The CPiA driver will
then probe for a CPiA device and if found it will create a device node
named "/dev/video/cpia" which will then be found and opened when the
kernel descend into the "/dev/video" directory.

In the trivial example above there was direct match between the name
of the driver and the name of the device inside /dev. Since one driver
might export more than one device this is not always the case. For
example a IDE disk driver whould export one device for each disk
connected to the bus and one device for each partitions found on those
disks. The device-tree exported by a IDE driver might look something
like this:

<pre>
/dev/disk/hda/raw
/dev/disk/hda/0
/dev/disk/hda/1
/dev/disk/hdb/raw
/dev/disk/hdc/raw
/dev/disk/hdc/0
</pre>

In this case the ide driver should be located in
"/system/drivers/dev/disk/ide". If someone attempts to open the
first partition on the master disk connected to the first controller
it whould have to open "/dev/disk/ide/hda/0".

When descending the path the kernel will first create the "/dev/disk"
and the "/dev/disk/ide" directory. Then it will load the ide-driver
which will detect that there are 3 disks connected to the two
controllers before decoding the partition tables and add all the nodes
listed above. At his point "/dev/disk/ide/hda/0" already
exists and no other drivers need to be loaded to fullfill the request.

\section sec4 Using busmanagers

To keep the kernel small and avoid recompiling when adding support for new 
hardware technology, the management code for busses like PCI and USB lives
in kernel modules called busmanagers. These busmanagers are loaded by the
bootmanager if they are necessary for loading the system ( e.g. the PCI busmanager
is necessary for the IDE driver ) or later after the root disk is mounted. Using
busmanagers from drivers is really easy: You just have to ask the kernel to give
you access to a busmanager with a specific name and the API version you support.
If you would like to access the PCI bus, maybe to scan for supported devices, you
would do something like this:

\code

PCI_bus_s* psBus = get_busmanager( PCI_BUS_NAME, PCI_BUS_VERSION );
if( psBus == NULL )
{
	// handle error
}

\endcode

You would now have a pointer to a PCI_bus_s structure, which is defined in the PCI
busmanager header file and contains pointers to the busmanager's functions. Access to
the USB bus works similar, alhough of course the functions in the USB_bus_s structure
are different.

\section sec5 Device management

Although the Syllable kernel driver interface is easy to use, it has one problem:
It is possible that two device drivers try to access one device. Also, the kernel
does not know what devices are supported by the drivers and so cannot show a list
of the supported/not supported hardware to the user. To solve this problems, the kernel
contains a special device manager. A device can be registered by any device driver or 
busmanager and is later claimed by the driver that wants to access the device. All later
tries by other drivers to claim the device will fail, and so the driver knows that it
should not use this device. If you write a PCI or USB device driver, the busmanager can
give you the handles to the devices it knows. All you have to do is to call the 
claim_device() function:

\code

int nHandle = sMyDevice.nHandle // get Handle from the busmanager
if( claim_device( nDeviceID, // device ID of the driver
                  nHandle,
                  "My device", // name for the device
                  DEVICE_AUDIO ) // type of the device
    != 0 ) {
	// handle error
}

\endcode

If you have claimed any device then the kernel will call the "device_release()" driver function for this
device. An implementation could look like this:

\code

status_t device_release( int nDeviceID, int nDeviceHandle, void* pData )
{
	release_device( nDeviceHandle ); // Release device
	... // free device data, release irq, ...
}

\endcode

The data pointer points to the data set which is the by the set_device_data() function.

Please note that if you support hardware that can be removed while the computer is running
( e.g. USB devices ) you have to call release_device( nHandle ) if the busmanager informs
you about the removal. 

If you want to support hardware, which is not managed by any busmanager, you can
do a register_device() call yourself:

\code

int nHandle = register_device( "My device", // name
                               "isa" ); // busname
claim_device( nDeviceID, nHandle, "My device", DEVICE_AUDIO );

\endcode

This will not prevent two drivers to access one device, but it will show some
nice information to the user.


\section sec6 Powermanagement

Before the computer goes into standby mode the kernel will call the "device_suspend()" function
of the driver. In this function you should save the hardware state and put the device into a lower
power mode:

\code

status_t device_suspend( int nDeviceID, int nDeviceHandle, void* pData )
{
	... // save state
}

\endcode

When the computer wakes up again, the kernel calls the device_resume() function which takes the same 
parameters as the device_suspend() function. The driver has to wakeup the device and restore its state
here.

\section sec7 Reducing boottime by disabling device drivers.

To avoid unnecessary tries to load drivers, it is possible to disable device
drivers. This feature can currently be used by PCI, ACPI and USB device drivers. If you did not
find any supported hardware, you should call disable_device_on_bus( nDeviceID, "bus name" ). This will
disable the device driver until the busmanager detects a hardware change.

*/


/*! \page busmanager_drivers

\section sec_bus_1 Structure of a busmanager

A busmanager is a normal kernel module that is located in the /system/drivers/dev/bus 
directory . The only difference is that it calls the register_busmanager() function:

\code

status_t	register_busmanager( int nDeviceID, const char* pzName, busmanager_get_hooks* pfHooks );

\endcode

The pzName parameter is the same name that the device drivers pass to the get_busmanager() function.
The pfHooks pointer points to the entrypoint of the busmanager. It should return a structure with entries
to the exported functions of the busmanager:

\code

struct BusHooks_s
{
	void (*function_ptr)();
	....
};

BusHooks_s sMyHooks =
{
	function,
	....
};

void* my_bus_get_hooks( int nVersion )
{
	if( nVersion == MY_BUS_VERSION )
		return( &sMyHooks );
	return( NULL );
}

....

register_busmanager( nDeviceID, "my_bus", my_bus_get_hooks );

\endcode

Once you have called the register_busmanager() function the kernel will not unload the driver until the
next reboot. It will also call the device_uninit() function of the driver before shutdown/reboot to give
it the possibility so save its settings.

*/

/*! \page filesystem_drivers

TODO: FS stuff

*/

/*! \page network_drivers

network stuff.

*/


/*! \page appserver_video_drivers

\section sec_gfx_start Basic description

The Syllable Video Driver API is unique to Syllable, and may at first appear to be a little confusing. 
This guide tries to explain the basic structure of a video driver and how the appserver handles video drivers and drawing functions. 


\section sec_gfx_1 The basic driver model

Syllable Video Drivers are written in C++ and provide methods required to open a video framebuffer, 
accelerated drawing functions and video overlay controls.

The DisplayDriver base class provides unacclerated software rendering functions which can draw a line between 
two points, or Blit a bitmap into the video framebuffer. The VesaDriver class is a fully functional VESA 2.0 
display driver, and is the default display driver which Syllable will attempt to use if no accelerated display 
driver can be found for the installed hardware. Most video drivers generally inherit from the DisplayDriver 
base class, but some may choose to inherit from the VesaDriver class. The VesaDriver provides additional 
VESA mode switching functions which may be used for certain hardware E.g. the Mach64 accelerated driver inherits 
from the VesaDriver in order to use the VESA mode switching functions for some chipsets. 


\section sec_gfx_2 Functionality

Because the DisplayDriver base class provides basic software rendering functions, an unaccelerated or partially 
accelerated video driver does not have to offer hardware drawing for all functions. The most basic display driver 
can implement only the required functions to detect and initialise the video hardware and allow the appserver to 
handle all of the video drawing in software. A more complete display driver can implement hardware accelerated 
drawing functions by overriding the various drawing methods in the DisplayDriver class. This generally provides 
much faster video drawing. A complete video driver would also implement the various Video Overlay functions which 
can be used by the Media Framework to display accelerated video playback. 

\section sec_gfx_3 The basic API

For the purposes of this guide we'll pretend we have some video hardware called "Fire", and assume we are writing 
a display driver for that hardware. 

The most basic video driver for any hardware must provide the following functions and methods.

\code
Fire::Fire( void );
Fire::~Fire( void );
bool Fire::IsInitiated( void ) const;
area_id Fire::Open( void );
int GetFramebufferOffset();
int Fire::GetScreenModeCount( void );
bool Fire::GetScreenModeDesc( int nIndex, os::screen_mode* psMode );
int Fire::SetScreenMode( os::screen_mode sMode );
extern "C" DisplayDriver* init_gfx_driver( void );
\endcode

The last function in that list is not a C++ method, but instead a C style function. This function is called when 
the display driver is initialised. Most display drivers simply implement init_gfx_driver(); to create a new instance 
of their display driver class, and then do the actual hardware detection and initialisation in the class constructor. 
The constructor and destructor should be fairly obvious. Generally the constructor will probe for the video hardware 
using the usual pci_* functions. If supported hardware is found then generally the hardware must be initialised, 
although this is an internal function of the display driver and will differ between different video hardware. 
What your initialisation code must do however is create and remap an area over the video framebuffer. This area 
is returned to the appserver later in the initialisation process and is the only way in which the DisplayDriver 
base class can access the video framebuffer. 

Unless your hardware has a functional VESA BIOS and you have inherited from the VesaDriver class, you will have 
to provide three methods which are used by the appserver to set the correct video mode. GetScreenModeCount(); 
should simply return the total number of valid screenmodes. GetScreenModeDesc(); returns a structure which 
contains the display mode information for the requested display mode. Finally, SetScreenMode(); is used to 
actually set the desired video mode. GetScreenModeCount(); & GetScreenModeDesc(); are generally implemented in a 
similiar maner in any display driver as they are hardware independent. SetScreenMode(); is obviously extremely 
hardware dependent, and how you implement this will depend on your hardware. 

IsInitiated(); simply returns true if the driver was able to detect and initialise the video hardware, or false 
otherwise.

GetFramebufferOffset(); should almost always return 0.

The Open(); method is the last peice of the puzzle. All it does it is return the area ID of the previously created
framebuffer area. The appserver can then find the video framebuffer base address from this area and use it to access 
the video framebuffer to perform drawing functions. 

\section sec_gfx_4 Accelerated Drawing

In previous versions of Syllable the video driver had to make sure that the framebuffer content was up to date
after every call to an accelerated method. This causes a big performance hit especially if there is a lot of
hardware accelerated drawing and the card/driver uses a command buffer. There are two new methods to solve this
problem: 

\code
void Fire::LockBitmap( SrvBitmap* pcDstBitmap, SrvBitmap* pcSrcBitmap = NULL );
void Fire::UnlockBitmap( SrvBitmap* pcDstBitmap, SrvBitmap* pcSrcBitmap = NULL );
\endcode

Both are called by the software rendering methods before/after they access any bitmap. A normal video driver 
will only have to implement the LockBitmap() method. An example:

\code
Fire::LockBitmap( SrvBitmap* pcDstBitmap, SrvBitmap* pcSrcBitmap = NULL )
{
	if( ( pcDstBitmap->m_bVideoMem == false && ( pcSrcBitmap == NULL || pcSrcBitmap->m_bVideoMem == false ) ) || m_bEngineDirty == false )
		return;
	// ... Lock hardware and call the WaitForIdle() method ...
	m_bEngineDirty = false;
}
\endcode

The m_bEngineDirty flag should be set in every hardware accelerated drawing method.
The UnlockBitmap() method is only necessary if the hardware does not allow accesses to the framebuffer and accelerated 
drawing at the same time.

An accelerated video driver will also provide methods which override the DisplayDriver software rendering methods. 
There implementation is highly hardware dependent, but most drivers implement methods to accelerate Line drawing, 
rectangular Fills and Bitmap Blits. The methods are: 

\code
bool Fire::DrawLine( SrvBitmap* pcBitMap, const IRect& cClipRect, const IPoint& cPnt1, const IPoint& cPnt2, const Color32_s& sColor, int nMode );
bool Fire::FillRect( SrvBitmap* pcBitMap, const IRect& cRect, const Color32_s& sColor, int nMode );
bool Fire::BltBitmap( SrvBitmap* pcDstBitMap, SrvBitmap* pcSrcBitMap, IRect cSrcRect, IRect cDstRect, int nMode, int nAlpha );
\endcode

All of these methods receive a pointer to a SrvBitmap class. This class is the internal bitmap which is being 
rendered too. SrvBitmaps can either be in video memory or user memory, depending on wether they are on screen 
or off screen. Generally, video hardware cannot perform rendering operations on memory which is not in its own 
video framebuffer, so you must first check to ensure that the bitmap you are rendering to exists in video memory[1]. 
If not, you should pass the rendering request down to your base class, which will use the software rendering methods 
in DisplayDriver.[2] 

DrawLine(); and FillRect(); recieve Color information which indicates the color that the line or fill should be 
drawn in. You may need to convert the RGBA information contained in the Color32_s class to information which can be 
used by your video hardware, but this is hardware dependent. 

All methods recieve the nMode argument, which indicates the drawing mode which should be used to 
perform the operation. This argument will specify DM_COPY (A stright drawing operation), DM_OVER 
(An alpha transparent "stamp" operation where the transparency is either "On" or "Off") or DM_BLEND 
(An alpha blending operation). DM_COPY and DM_BLEND operations are the most common, and you may choose not to support 
hardware accelerated DM_OVER and DM_BLEND operations. Generally, passing this drawing operations down to the 
DisplayDriver methods does not noticably slow down rendering[3]. 

BltBitmap(); has an alpha parameter but the hardware only has to care about it if it supports the DM_BLEND mode.

\section sec_gfx_5 Offscreen videomemory bitmaps

If your card supports offscreen bitmaps in videomemory then you should implement this. The appserver can use 
these bitmaps to store the content of a window. In the constructor of the driver you call InitializeMemory() with
the offset of the offscreen area and the size. You also have to provide alignment information for the start of every 
bitmap and the alignment of the bitmap rows. If you have initialized the memory manager then you use the m_nVideoMemOffset 
member of a SrvBitmap to set the source/destination offset and the m_nBytesPerLine member to set the source/destination pitch.
If you support video overlays you should use the AllocateMemory() method of the DisplayDriver class to allocate memory 
for it using the memory manager.

\section sec_gfx_6 Video Overlays

If your hardware supports Video Overlays you may wish to support this functionality in your display driver. 
There are four methods which you must provide in order to support Video Overalys correctly. They are: 

\code
bool Fire::CreateVideoOverlay( const os::IPoint& cSize, const os::IRect& cDst, os::color_space eFormat, os::Color32_s sColorKey, area_id *pBuffer );
bool Fire::RecreateVideoOverlay( const os::IPoint& cSize, const os::IRect& cDst, os::color_space eFormat, area_id *pBuffer );
void Fire::DeleteVideoOverlay( area_id *pBuffer );
\endcode

Unlike the rendering functions, these functions do not have a software implementation in the DisplayDriver class. 
Your video driver must either support Video Overlays or the user will not be able to use them at all.[4] 

CreateVideoOverlay(); and DeleteVideoOverlay(); are self explanitory. RecreateVideoOverlay(); is 
used to resize a current Video Overlay or to change the current color space of a Video Overlay. 

All of these functions will be highly hardware specific and the functionality is complex. You should refer to 
actual driver implementations of these methods if you wish to understand how they work.[5]

\section sec_gfx_7 Footnotes

[1]: SrvBitmap contains a public member called m_bVideoMem which is true if the SrvBitmap exists within the video framebuffer.

[2]: E.g:
if( pcBitMap->m_bVideoMem == false )
{   return( DisplayDriver::FillRect( pcBitMap, cRect, sColor ) );
}

If you support offscreen videomemory bitmaps then you also have to use the m_nVideoMemOffset and m_nBytesPerRow members!

[3]: The DisplayDriver class now also supports MMX accelerated functions on hardware which supports MMX. This generally provides quite fast software rendering on most systems. 

[4]: Users can instead use the slower Bitmap rendering output provided by the Media Framework.

[5]: At the time of writing the Riva, GeForce, Radeon, Mach64, Intel and SiS drivers implement Video Overlays.

*/










